// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  cart     CartItem[]
  addresses Address[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
  promotions CategoryPromotion[]

  @@map("categories")
}

model Product {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String   @db.Text
  shortDescription String?
  categoryId      String
  price           Decimal  @db.Decimal(10, 2)
  originalPrice   Decimal? @db.Decimal(10, 2)
  sku             String   @unique
  images          String[]
  ingredients     String[]
  shelfLife       Int? // in days
  weight          String? // e.g., "500g", "1kg"
  packSize        String?
  taxPercent      Decimal  @default(18) @db.Decimal(5, 2)
  inventoryQty    Int      @default(0)
  isPerishable    Boolean  @default(false)
  isActive        Boolean  @default(true)
  isBestSeller    Boolean  @default(false)
  isFeatured      Boolean  @default(false)
  shippingRegions String[] // array of allowed regions/pincodes
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]
  promotions ProductPromotion[]

  @@map("products")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  type        AddressType @default(DELIVERY)
  name        String
  phone       String
  address     String
  city        String
  state       String
  pincode     String
  landmark    String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  userId            String
  addressId         String
  status            OrderStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     PaymentMethod
  paymentId         String? // Razorpay payment ID
  razorpayOrderId   String? // Razorpay order ID
  subtotal          Decimal     @db.Decimal(10, 2)
  taxAmount         Decimal     @db.Decimal(10, 2)
  shippingAmount    Decimal     @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal     @default(0) @db.Decimal(10, 2)
  totalAmount       Decimal     @db.Decimal(10, 2)
  deliveryDate      DateTime?
  deliverySlot      String?
  trackingNumber    String?
  notes             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id])
  address   Address     @relation(fields: [addressId], references: [id])
  items     OrderItem[]
  coupon    Coupon?     @relation(fields: [couponId], references: [id])
  couponId  String?
  promotionUsages PromotionUsage[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2) // price at time of order
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Coupon {
  id            String      @id @default(cuid())
  code          String      @unique
  type          CouponType
  value         Decimal     @db.Decimal(10, 2)
  minOrderValue Decimal?    @db.Decimal(10, 2)
  maxDiscount   Decimal?    @db.Decimal(10, 2)
  usageLimit    Int?
  usedCount     Int         @default(0)
  isActive      Boolean     @default(true)
  validFrom     DateTime
  validUntil    DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  orders Order[]

  @@map("coupons")
}

model DeliverySlot {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  startTime   String   // e.g., "09:00"
  endTime     String   // e.g., "12:00"
  maxOrders   Int      @default(50)
  currentOrders Int    @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([date, startTime, endTime])
  @@map("delivery_slots")
}

model BlackoutDate {
  id        String   @id @default(cuid())
  date      DateTime @db.Date
  reason    String?
  createdAt DateTime @default(now())

  @@unique([date])
  @@map("blackout_dates")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("reviews")
}


model Promotion {
  id            String         @id @default(cuid())
  name          String
  type          PromotionType
  value         Decimal        @db.Decimal(10, 2)
  minOrder      Decimal?       @db.Decimal(10, 2)
  couponCode    String?        @unique
  maxUses       Int?
  userLimit     Int?
  startAt       DateTime
  endAt         DateTime
  combinable    Boolean        @default(false)
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  products      ProductPromotion[]
  categories    CategoryPromotion[]
  usages        PromotionUsage[]

  @@map("promotions")
}

model ProductPromotion {
  id           String     @id @default(cuid())
  productId    String
  promotionId  String
  createdAt    DateTime   @default(now())

  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  promotion    Promotion  @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@unique([productId, promotionId])
  @@map("product_promotions")
}

model CategoryPromotion {
  id           String     @id @default(cuid())
  categoryId   String
  promotionId  String
  createdAt    DateTime   @default(now())

  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  promotion    Promotion  @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@unique([categoryId, promotionId])
  @@map("category_promotions")
}

model PromotionUsage {
  id           String     @id @default(cuid())
  orderId      String?
  userId       String?
  promotionId  String
  usedAt       DateTime   @default(now())

  order        Order?     @relation(fields: [orderId], references: [id])
  promotion    Promotion  @relation(fields: [promotionId], references: [id])

  @@map("promotion_usages")
}

model StoreLocation {
  id        String   @id @default(cuid())
  name      String
  address   String
  city      String
  state     String
  pincode   String
  phone     String?
  email     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("store_locations")
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum AddressType {
  DELIVERY
  BILLING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PACKED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  RAZORPAY
  COD
}

enum CouponType {
  PERCENTAGE
  FIXED
}


enum PromotionType {
  PERCENTAGE
  FIXED
  BOGO
  BUNDLE
  FLASH
}